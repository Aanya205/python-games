import turtle
import time
import random

delay = 0.1
score = 0
high_score = 0


# Creating a window screen
wn = turtle.Screen()
wn.title("Snake Game")
wn.bgcolor("blue")
# the width and height can be put as user's choice
wn.setup(width=600, height=600)
wn.tracer(0)

# head of the snake
head = turtle.Turtle()
head.shape("square")
head.color("white")
head.penup()
head.goto(0, 0)
head.direction = "Stop"

# food in the game
food = turtle.Turtle()
colors = random.choice(['red', 'green', 'black'])
shapes = random.choice(['square', 'triangle', 'circle'])
food.speed(0)
food.shape(shapes)
food.color(colors)
food.penup()
food.goto(0, 100)

pen = turtle.Turtle()
pen.speed(0)
pen.shape("square")
pen.color("white")
pen.penup()
pen.hideturtle()
pen.goto(0, 250)
pen.write("Score : 0  High Score : 0", align="center",
          font=("candara", 24, "bold"))



#make player move continuously in any direction. and with wasd we will be able to control the direction

#Here we will code to move teh snake continuously


def group():
  if head.direction != "down":
      head.direction = "up"


def godown():
  if head.direction != "up":
      head.direction = "down"


def goleft():
  if head.direction != "right":
      head.direction = "left"


def goright():
  if head.direction != "left":
      head.direction = "right"


#we will be controling the snake with keys. xcor() and ycor() tell the current position of the snake
#this gves current y and gets stored in y
# we here adding 10 to current y value to move to top and with sety we are updating the value
def move():
  if head.direction == "up":
      y = head.ycor()
      head.sety(y+20)
  if head.direction == "down":
      y = head.ycor()
      head.sety(y-20)
  if head.direction == "left":
      x = head.xcor()
      head.setx(x-20)
  if head.direction == "right":
      x = head.xcor()
      head.setx(x+20)

#now use keys to move
 # It is used to listen to the keys
#when w is pressed goup func is called where itnmake snake go up
wn.listen()
wn.onkeypress(group, "w")
wn.onkeypress(godown, "s")
wn.onkeypress(goleft, "a")
wn.onkeypress(goright, "d")


#All body parts are stored here so taht we can give if that head touches the  any of the body part the game gets over.

segments=[]


   #code when player touches the wall left, right, up, down  then it come back to middle also ameover comes on screen. Below it emans if snake current position is less then 0 or greater tha width(600). Cuyrent position =xor() and ycor(0), like this do for all sides so that player ca come back to the middle and game can get over.
# Main Gameplay
while True:
    wn.update()
    if head.xcor() > 290 or head.xcor() < -290 or head.ycor() > 290 or head.ycor() < -290:
        time.sleep(1)
        head.goto(0, 0)
        head.direction = "Stop"
        colors = random.choice(['red', 'blue', 'green'])
        shapes = random.choice(['square', 'circle'])
        for segment in segments:
            segment.goto(1000, 1000)
        segments.clear()
        score = 0
        delay = 0.1
        pen.clear()
        pen.write("Score : {} High Score : {} ".format(
            score, high_score), align="center", font=("candara", 24, "bold"))
    if head.distance(food) < 20:
        x = random.randint(-270, 270)
        y = random.randint(-270, 270)
        food.goto(x, y)

        # Adding segment
        new_segment = turtle.Turtle()
        new_segment.speed(0)
        new_segment.shape("square")
        new_segment.color("orange")  # tail colour
        new_segment.penup()
        segments.append(new_segment)
        delay -= 0.001
        score += 10
        if score > high_score:
            high_score = score
        pen.clear()
        pen.write("Score : {} High Score : {} ".format(
            score, high_score), align="center", font=("candara", 24, "bold"))
    # Checking for head collisions with body segments
    for index in range(len(segments)-1, 0, -1):
        x = segments[index-1].xcor()
        y = segments[index-1].ycor()
        segments[index].goto(x, y)
    if len(segments) > 0:
        x = head.xcor()
        y = head.ycor()
        segments[0].goto(x, y)
    move()
    for segment in segments:
        if segment.distance(head) < 20:
            time.sleep(1)
            head.goto(0, 0)
            head.direction = "stop"
            colors = random.choice(['red', 'blue', 'green'])
            shapes = random.choice(['square', 'circle'])
            for segment in segments:
                segment.goto(1000, 1000)
            segments.clear()

            score = 0
            delay = 0.1
            pen.clear()
            pen.write("Score : {} High Score : {} ".format(
                score, high_score), align="center", font=("candara", 24, "bold"))
    time.sleep(delay)

wn.mainloop()

    





#use of random function

#import ranfom
#randint generates one number out of given range and we can store taht nuber in a vraiable.

#x=random.randint(1, 10) # generates integer value
#y=random.random()  #no parameter can be given directly. generates float value
#
#shuffle works only on list. it changes the position when shuffling is done.



#--





